/// <reference types="node" />
import { IConfig } from '@worldsibu/convector-core-chaincode';
import { ChaincodeMockStub } from '@theledger/fabric-mock-stub';
import { ControllerAdapter } from '@worldsibu/convector-core';
export interface CertificateProps {
    commonName: string;
    countryName?: string;
    localityName?: string;
    stateOrProvinceName?: string;
    organizationName?: string;
    organizationalUnitName?: string;
    emailAddress?: string;
}
export declare class MockControllerAdapter implements ControllerAdapter {
    users: {};
    stub: ChaincodeMockStub;
    init(config: IConfig[]): Promise<void>;
    getById<T>(id: string): Promise<T>;
    invoke(controller: string, name: string, config?: any, ...args: any[]): Promise<{
        result: string | object;
        status: number;
        message: string;
        payload: Buffer;
    }>;
    addUser(name: string, certificate?: string): any;
    addUser(props: CertificateProps): any;
    getUserFingerprint(user: string): any;
}
