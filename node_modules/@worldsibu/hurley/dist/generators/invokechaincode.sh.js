"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var convector_common_fabric_helper_1 = require("@worldsibu/convector-common-fabric-helper");
var path_1 = require("path");
var logs_1 = require("../utils/logs");
var organization_1 = require("../models/organization");
var peer_1 = require("../models/peer");
var InvokeChaincodeShOptions = (function () {
    function InvokeChaincodeShOptions() {
        this.user = 'user1';
        this.organization = new organization_1.Organization('org1', {
            channels: [],
            peers: [new peer_1.Peer("peer0", { number: 0, ports: ['7051', '7052', '7053'], couchDbPort: '5084' })],
            users: []
        });
    }
    return InvokeChaincodeShOptions;
}());
exports.InvokeChaincodeShOptions = InvokeChaincodeShOptions;
var InvokeChaincodeShGenerator = (function () {
    function InvokeChaincodeShGenerator(path, options) {
        this.path = path;
        this.options = options;
    }
    InvokeChaincodeShGenerator.prototype.run = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var homedir, helper, res, targets, proposalResponse, ex_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        homedir = require('os').homedir();
                        helper = new convector_common_fabric_helper_1.ClientHelper({
                            channel: this.options.channel.name,
                            skipInit: true,
                            user: this.options.user,
                            keyStore: path_1.resolve(this.path, ".hfc-" + this.options.organization.name),
                            networkProfile: path_1.resolve(this.path, "network-profiles/" + this.options.organization.name + ".network-profile.yaml"),
                            txTimeout: 300000
                        });
                        logs_1.l("Sending transaction as " + this.options.user + " in org " + this.options.organization.name + "...");
                        return [4, helper.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 6, , 7]);
                        return [4, helper.useUser(this.options.user || 'user1')];
                    case 3:
                        _a.sent();
                        targets = this.options.organization.peers.map(function (peer) { return peer.name + "." + _this.options.organization.name + ".hurley.lab"; });
                        return [4, helper.sendTransactionProposal({
                                targets: targets,
                                fcn: this.options.function,
                                chaincodeId: this.options.name,
                                args: this.options.params,
                                transientMap: JSON.parse(this.options.transientData || '{}')
                            }, false)];
                    case 4:
                        proposalResponse = (_a.sent()).proposalResponse;
                        return [4, helper.processProposal(proposalResponse)];
                    case 5:
                        res = _a.sent();
                        logs_1.l("Transaction sent! " + res.code + " " + res.info + " " + res.status + " " + res.txId);
                        logs_1.l("Result: " + JSON.stringify(res.result));
                        helper.close();
                        return [3, 7];
                    case 6:
                        ex_1 = _a.sent();
                        if (ex_1.responses) {
                            if (ex_1.responses.filter(function (response) { return !response.isProposalResponse; }).length === 0) {
                                logs_1.l("No peer ran tx successfully!");
                                logs_1.l(ex_1);
                                return [2];
                            }
                            logs_1.l("At least one peer returned an error!");
                            logs_1.l("This may happen when a transaction queries private data that's not accessible to all peers");
                            ex_1.responses.map(function (response) {
                                logs_1.l("Response from " + response.peer.name);
                                if (response.isProposalResponse) {
                                    logs_1.l(JSON.stringify(response));
                                }
                                else {
                                    logs_1.l(response.response.payload.toString('utf8'));
                                }
                            });
                        }
                        else {
                            logs_1.l("Errors found!");
                            logs_1.l(ex_1);
                        }
                        return [3, 7];
                    case 7: return [2];
                }
            });
        });
    };
    return InvokeChaincodeShGenerator;
}());
exports.InvokeChaincodeShGenerator = InvokeChaincodeShGenerator;
//# sourceMappingURL=invokechaincode.sh.js.map