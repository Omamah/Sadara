"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("./base");
var path_1 = require("path");
var CryptoGeneratorOptions = (function () {
    function CryptoGeneratorOptions() {
    }
    return CryptoGeneratorOptions;
}());
exports.CryptoGeneratorOptions = CryptoGeneratorOptions;
var CryptoGeneratorShGenerator = (function (_super) {
    tslib_1.__extends(CryptoGeneratorShGenerator, _super);
    function CryptoGeneratorShGenerator(filename, path, options) {
        var _this = _super.call(this, filename, path) || this;
        _this.options = options;
        _this.success = path_1.join(_this.path, 'cyptofilesgenerator.sh.successful');
        _this.contents = "\n  #!/bin/bash\n  set -e\n  ROOT_DIR=" + path_1.join(__dirname, '../..') + "\n  NETWORK_ROOT=" + _this.options.networkRootPath + "\n  BIN=$NETWORK_ROOT/fabric-binaries/" + _this.options.envVars.FABRIC_VERSION + "/bin\n  TARGET=$NETWORK_ROOT/artifacts\n  \n  export FABRIC_CFG_PATH=$NETWORK_ROOT\n  \n  function fail () {\n    if [ \"$?\" -ne 0 ]; then\n      echo $1\n      exit 1\n    fi\n  }\n  \n  # remove previous crypto material and config transactions\n  rm -fr $TARGET/config/*\n  rm -fr $TARGET/crypto-config/*\n  \n  mkdir -p $TARGET/config/\n  mkdir -p $TARGET/crypto-config/\n  \n  # generate crypto material\n  $BIN/cryptogen generate --config=$NETWORK_ROOT/crypto-config.yaml --output=$TARGET/crypto-config\n  fail \"Failed to generate crypto material...\"\n  \n  # generate genesis block for orderer\n  $BIN/configtxgen -profile OrgsOrdererGenesis -outputBlock $TARGET/config/genesis.block\n  fail \"Failed to generate orderer genesis block...\"\n  \n  " + _this.options.channels.map(function (ch) { return "\n  # =========== CHANNEL " + ch.name + " ============\n\n  # generate channel configuration transaction\n  $BIN/configtxgen -profile OrgsChannel -outputCreateChannelTx $TARGET/config/" + ch.name + ".tx -channelID " + ch.name + "\n  fail \"Failed to generate " + ch.name + " configuration transaction...\"\n\n    " + _this.options.orgs
            .filter(function (org) { return !!org.channels.find((function (x) { return x.name === ch.name; })); })
            .map(function (org) { return "\n  $BIN/configtxgen -profile OrgsChannel -outputAnchorPeersUpdate $TARGET/config/peer0." + org.name + ".hurley.lab." + ch.name + ".tx -channelID " + ch.name + " -asOrg " + org.name + "MSP\n  fail \"Failed to generate " + ch.name + " anchor peer update for " + org.name + "...\"\n    \n    "; }).join('') + "\n  "; }).join('') + "\n  \n  touch " + _this.success + "\n  ";
        return _this;
    }
    return CryptoGeneratorShGenerator;
}(base_1.BaseGenerator));
exports.CryptoGeneratorShGenerator = CryptoGeneratorShGenerator;
//# sourceMappingURL=cryptofilesgenerator.sh.js.map