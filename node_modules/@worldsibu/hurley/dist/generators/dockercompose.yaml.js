"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("./base");
var path_1 = require("path");
var sysWrapper_1 = require("../utils/sysWrapper");
var DockerComposeYamlOptions = (function () {
    function DockerComposeYamlOptions() {
    }
    return DockerComposeYamlOptions;
}());
exports.DockerComposeYamlOptions = DockerComposeYamlOptions;
var DockerComposeYamlGenerator = (function (_super) {
    tslib_1.__extends(DockerComposeYamlGenerator, _super);
    function DockerComposeYamlGenerator(filename, path, options) {
        var _this = _super.call(this, filename, path) || this;
        _this.options = options;
        _this.success = path_1.join(_this.path, 'dockercompose.yaml.successful');
        return _this;
    }
    DockerComposeYamlGenerator.prototype.build = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var certs;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Promise.all(this.options.orgs.map(function (org) { return _this.discoverCert(org); }))];
                    case 1:
                        certs = _a.sent();
                        this.contents = "version: '2'\n\nnetworks:\n  hurley_dev_net:\n\nservices:\n    # Orderer\n    orderer.hurley.lab:\n        container_name: orderer.hurley.lab\n        image: hyperledger/fabric-orderer:" + this.options.envVars.FABRIC_VERSION + "\n        environment:\n            - ORDERER_GENERAL_LOGLEVEL=debug\n            - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0\n            - ORDERER_GENERAL_GENESISMETHOD=file\n            - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block\n            - ORDERER_GENERAL_LOCALMSPID=OrdererMSP\n            - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp\n        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer\n        command: orderer\n        ports:\n            - 7050:7050\n        volumes:\n            - " + this.options.networkRootPath + "/artifacts/config/:/etc/hyperledger/configtx\n            - " + this.options.networkRootPath + "/artifacts/crypto-config/ordererOrganizations/hurley.lab/orderers/orderer.hurley.lab/:/etc/hyperledger/msp/orderer\n" + this.options.orgs.map(function (org) { return "\n            - " + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + org.name + ".hurley.lab/peers/peer0." + org.name + ".hurley.lab/:/etc/hyperledger/msp/peer" + org.name; }).join('') + "\n        networks:\n            - hurley_dev_net\n\n" + this.options.orgs.map(function (org, i) { return "\n    # " + org.name + "\n    ca." + org.name + ".hurley.lab:\n        image: hyperledger/fabric-ca:" + _this.options.envVars.FABRIC_VERSION + "\n        environment:\n            - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server\n            - FABRIC_CA_SERVER_CA_NAME=ca." + org.name + ".hurley.lab\n            - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca." + org.name + ".hurley.lab-cert.pem\n            - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/" + certs[i] + "\n        ports:\n            - \"7" + i + "54:7054\"\n        command: fabric-ca-server start -b admin:adminpw -d\n        volumes:\n            - " + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + org.name + ".hurley.lab/ca/:/etc/hyperledger/fabric-ca-server-config\n        container_name: ca." + org.name + ".hurley.lab\n        networks:\n            - hurley_dev_net\n\n    # Peers\n\n" + org.peers.map(function (peer) { return "\n    " + peer.name + "." + org.name + ".hurley.lab:\n        container_name: " + peer.name + "." + org.name + ".hurley.lab\n        image: hyperledger/fabric-peer:" + _this.options.envVars.FABRIC_VERSION + "\n        environment:\n            - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock\n            - CORE_PEER_ID=" + peer.name + "." + org.name + ".hurley.lab\n            - CORE_PEER_ADDRESS=" + peer.name + "." + org.name + ".hurley.lab:7051\n            - CORE_PEER_GOSSIP_BOOTSTRAP=" + peer.name + "." + org.name + ".hurley.lab:7051\n            - CORE_PEER_LISTENADDRESS=" + peer.name + "." + org.name + ".hurley.lab:7051\n            - CORE_PEER_GOSSIP_ENDPOINT=" + peer.name + "." + org.name + ".hurley.lab:7051\n            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=" + peer.name + "." + org.name + ".hurley.lab:7051\n            - CORE_PEER_CHAINCODELISTENADDRESS=" + peer.name + "." + org.name + ".hurley.lab:7052\n            - CORE_VM_DOCKER_ATTACHSTDOUT=true\n            - CORE_CHAINCODE_EXECUTETIMEOUT=60\n            - CORE_LOGGING_PEER=debug\n            - CORE_LOGGING_LEVEL=DEBUG\n            - FABRIC_LOGGING_SPEC=DEBUG\n            - CORE_LOGGING_GOSSIP=DEBUG\n            - CORE_LOGGING_GRPC=DEBUG\n            - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG\n            - CORE_PEER_LOCALMSPID=" + org.name + "MSP\n            - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@" + org.name + ".hurley.lab/msp\n            - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true\n            - CORE_PEER_GOSSIP_ORGLEADER=false\n            - CORE_PEER_GOSSIP_USELEADERELECTION=true\n            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB\n            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb." + peer.name + "." + org.name + ".hurley.lab:5984\n            - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=\n            - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=\n            - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_hurley_dev_net\n        working_dir: /opt/gopath/src/github.com/hyperledger/fabric\n        command: peer node start --peer-chaincodedev=true\n        ports:\n            - " + peer.options.ports[0] + ":7051\n            - " + peer.options.ports[1] + ":7052\n            - " + peer.options.ports[2] + ":7053\n        volumes:\n            - /var/run/:/host/var/run/\n            - " + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + org.name + ".hurley.lab/peers/" + peer.name + "." + org.name + ".hurley.lab/msp:/etc/hyperledger/msp/peer\n            - " + _this.options.networkRootPath + "/artifacts/crypto-config/peerOrganizations/" + org.name + ".hurley.lab/users:/etc/hyperledger/msp/users\n            - " + _this.options.networkRootPath + "/artifacts/config:/etc/hyperledger/configtx\n            - shared:/shared\n        depends_on:\n            - orderer.hurley.lab\n            - couchdb." + peer.name + "." + org.name + ".hurley.lab\n        networks:\n            - hurley_dev_net\n\n    # Couch\n    couchdb." + peer.name + "." + org.name + ".hurley.lab:\n        container_name: couchdb." + peer.name + "." + org.name + ".hurley.lab\n        image: hyperledger/fabric-couchdb:" + _this.options.envVars.THIRDPARTY_VERSION + "\n        environment:\n            - COUCHDB_USER=\n            - COUCHDB_PASSWORD=\n        ports:\n            - " + peer.options.couchDbPort + ":5984\n        networks:\n            - hurley_dev_net\n\n"; }).join('') + "\n"; }).join('') + "\n      \nvolumes:\n  shared:\n\n  \n  ";
                        return [2];
                }
            });
        });
    };
    DockerComposeYamlGenerator.prototype.discoverCert = function (org) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var files;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, sysWrapper_1.SysWrapper.enumFilesInFolder(path_1.join(this.options.networkRootPath, "/artifacts/crypto-config/peerOrganizations/" + org.name + ".hurley.lab/ca"))];
                    case 1:
                        files = _a.sent();
                        return [2, files.find(function (x) { return x.indexOf('_sk') !== -1; })];
                }
            });
        });
    };
    return DockerComposeYamlGenerator;
}(base_1.BaseGenerator));
exports.DockerComposeYamlGenerator = DockerComposeYamlGenerator;
//# sourceMappingURL=dockercompose.yaml.js.map