"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sysWrapper_1 = require("../utils/sysWrapper");
var organization_1 = require("./organization");
var channel_1 = require("./channel");
var user_1 = require("./user");
var peer_1 = require("./peer");
var HL_VERSION = '1.4.0';
var HL_EXT_VERSION = '0.4.14';
var NetworkOptions = (function () {
    function NetworkOptions() {
        this.channels = 1;
        this.organizations = 1;
        this.users = 1;
        this.inside = false;
    }
    return NetworkOptions;
}());
exports.NetworkOptions = NetworkOptions;
;
var Network = (function () {
    function Network(path, options) {
        this.path = path;
        this.options = options;
        this.options.hyperledgerVersion = HL_VERSION;
        this.options.externalHyperledgerVersion = HL_EXT_VERSION;
    }
    Network.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.networkConfigPath) return [3, 2];
                        return [4, this.buildNetworkFromFile(this.options.networkConfigPath)];
                    case 1:
                        _a.sent();
                        return [2];
                    case 2:
                        this.buildNetwork(this.options.organizations, this.options.channels, this.options.users);
                        return [2];
                }
            });
        });
    };
    Network.prototype.buildNetwork = function (organizations, channels, users) {
        var _a = buildNetworkConfig({ organizations: organizations, channels: channels, users: users }), orgs = _a.orgs, chs = _a.chs;
        this.organizations = orgs;
        this.channels = chs;
    };
    Network.prototype.buildFromSave = function (organizations, channels, users) {
        if (organizations === void 0) { organizations = []; }
        if (channels === void 0) { channels = []; }
        this.organizations = organizations;
        this.channels = channels;
    };
    Network.prototype.buildNetworkFromFile = function (networkConfigPath) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var networkConfig;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, sysWrapper_1.SysWrapper.getJSON(networkConfigPath)];
                    case 1:
                        networkConfig = _a.sent();
                        this.initChannels(networkConfig);
                        this.initOrgs(networkConfig);
                        return [2];
                }
            });
        });
    };
    Network.prototype.initChannels = function (config) {
        this.channels = config.channels.map(function (channelName) { return new channel_1.Channel(channelName); });
    };
    Network.prototype.initOrgs = function (config) {
        var _this = this;
        if (!config.topology) {
            throw new Error('Config must have a topology field');
        }
        var orgs = config.topology;
        var keys = Object.keys(orgs);
        this.organizations = keys.map(function (key, i) {
            var org = orgs[key];
            var channels = org.channels
                .filter(function (ch) { return _this.channels.find(function (availableChannels) { return availableChannels.name === ch; }); })
                .map(function (ch) { return _this.channels.find(function (availableChannels) { return availableChannels.name === ch; }); });
            var users = org.users ?
                org.users.map(function (username) { return new user_1.User(username); })
                : [];
            var peers = org.peers || org.peers && org.peers > 0 ?
                tslib_1.__spread(Array(org.peers).keys()).map(function (j) { return new peer_1.Peer("peer" + j, {
                    number: j,
                    ports: ["7" + i + "5" + (j * 3 + 1), "7" + i + "5" + (j * 3 + 2), "7" + i + "5" + (j * 3 + 3)],
                    couchDbPort: "5" + i + "8" + (j + 4)
                }); })
                : [new peer_1.Peer("peer0", {
                        number: 0,
                        ports: ["7" + i + "51", "7" + i + "52", "7" + i + "53"],
                        couchDbPort: "5" + i + "84"
                    })];
            var model = new organization_1.Organization(key, { channels: channels, peers: peers, users: users });
            return model;
        });
    };
    return Network;
}());
exports.Network = Network;
var buildNetworkConfig = function (params) {
    var chs = [];
    for (var i = 0; i < params.channels; i++) {
        chs.push(new channel_1.Channel("ch" + (i + 1)));
    }
    var orgs = [];
    for (var i = 0; i < params.organizations; i++) {
        var usrs = [];
        params.users = params.users++;
        for (var i_1 = 0; i_1 < params.users; i_1++) {
            usrs.push(new user_1.User("user" + (i_1 + 1)));
        }
        var TMP_PEER_NUMBER = 1;
        var peers = [];
        for (var j = 0; j < TMP_PEER_NUMBER; j++) {
            peers.push(new peer_1.Peer("peer" + j, {
                number: j,
                ports: ["7" + i + "51", "7" + i + "52", "7" + i + "53"],
                couchDbPort: "5" + i + "84"
            }));
        }
        orgs.push(new organization_1.Organization("org" + (i + 1), {
            channels: chs,
            peers: peers,
            users: usrs
        }));
    }
    return { orgs: orgs, chs: chs };
};
//# sourceMappingURL=network.js.map